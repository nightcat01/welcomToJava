토이 프로젝트 시작

1. 음계 계산기

## 기간
    * 두달 안짝
    * 벤치마킹, 계산법 공부 등에 약 한달
    * 개발, 테스트까지 약 한달
    * 늦어도 10월 말까지는 개발 종료
## 목표
    * 1차 목표 : 1도 ~ 12도까지 계산하는 계산기를 만들어보자
    * 2차 목표 : 찾고자 하는 음계에서 소리가 나도록 만들어보자
    * 3차 목표 : 계산 법 등 설명 추가
    * 4차 목표 : sus4, mod 등 심화 단계 계산 적용
## 개발
    * web으로 1차 개발
        - JAVA
 - thymleaf
 - html5
        - jdk 1.8
        - spring boot 2.1.8
        - DB는 별도로 두지 않는다.
    * android로 2차 개발
        - JAVA
        - jdk 1.8
        - 가능할지는 모르겠다.
## 벤치 마킹 및 검색
    * 음계 계산기
        * 계산법에 관한 이야기만 나오며, 앱 등은 확인 되지 않는다.
    * scale calculator
        * 거리 환산 등에 대한 앱만 확인 됨.
## 음계 계산법
    * 기준 C3
    * 완전(perfect interval) : 1, 4, 5, 8
    * 장(major interval), 단(minor interval) : 2, 3, 6, 7
    * 증(augumented interval) : 4
    * 감(diminished interval) : 5
    * 2도
        1. 도-레처럼 검은 건반이 있는 경우 온음이라고 하며, 장2도라고 한다.
        2. 미-파, 시-도처럼 없는 경우 반음이라고 하며, 단2도 라고 한다.
    * 3도
        1. 반음을 포함하지 않는 경우 장3도
            - 도-레-미, 파-솔-라
        2. 반음을 포함할 경우 단3도
            - 레-(미-파), (미-파)-솔, 라-(시-도)
    * 4도
        1. 반음을 한개 포함할 경우 완전4도
            - 도-레-(미-파)
        2. 반음의 갯수가 적을 경우 증4도
            - 파-솔-라-시
    * 5도
        1. 반음이 1개 포함된 경우 완전5도
            - 도-레-(미-파)-솔
        2. 반음이 2개 포함된 경우 감5도
            - (시-도)-레-(미-파)
            - 시-파
    * 6도
        1. 반음이 1개 포함된 경우 장6도
            - 도-레-(미-파)-솔-라
            - 파-솔-라-(시-도)-레
        2. 반음이 2개 포함된 경우 단6도
            - (미-파)-솔-라-(시-도)
            - (시-도)-레-(미-파)-솔
    * 7도
        1. 반음이 1개 포함된 경우 장7도
            - 도-레-(미-파)-솔-라-시
            - 파-솔-라-(시-도)-레-미
        2. 반음이 2개 포함된 경우 단7도
            - 레-(미-파)-솔-라-(시-도)
            - (시-도)-레-(미-파)-솔-라    
## 조표
    * #붙이는 순서
            - 파-도-솔-레-라-미-시
            - F-C-G-D-A-E-B
    * b(플랫) 붙이는 순서
            - 시-미-라-레-솔-도-파
            - B-E-A-D-G-C-F
## 계산식 산출 방법
    * 건반 갯수로 계산하도록 한다.
            - 도 도# 레  레# 미 파 파# 솔 솔# 라 라# 시 도
            - 1    2     3   4    5   6   7     8   9   10  11   12 13
            - 25  26   27 28  29 30 31   32 33  34 35   36 37
    * 반음씩 1을 더하는 형태로 진행
    * #과 b(플랫)을 생각하여 어느 위치에서 더하고 뺄지 생각해야 한다.
    * 도 ~ 시까지를 한 세트로 하여 1octave로 정의한다.
    * 1octave : 1*12 = 12, 2octave : 2*12 = 24     . . . . . . . .
            - 2octave C 시작 : 13
            - 3octave C 시작 : 25 
    * rootScale = 1(기준점 부터 몇도 차이인지 확인)
    * (rootScale+((rootOctave-1)*12)) + (calScale+((calOctave-1)*12)) = result
    * 옥타브는 계산하지 않는 것으로 변경
    * result = 절대값(rootScale - calScale)
    
## 참조
    * https://m.blog.naver.com/PostView.nhn?blogId=musicing_hj&logNo=220750408617&proxyReferer=https%3A%2F%2Fwww.google.com%2F
    